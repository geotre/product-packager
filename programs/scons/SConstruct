from pathlib import Path
from enum import Enum
from typing import Iterator, List

from scons_helper import (
    calculate_target_file_paths,
    print_error,
    get_godot_project_files,
    validate_git_versions,
)
from SCons.Script import Dir, Environment, Export, File, Import, AddOption, Return

# BEGIN - auto-completion
env = Environment()
# END - auto-completion

Import("env")

AddOption("--strict", action="store_true", dest="strict")
AddOption("--epub", action="store_true", dest="epub")
AddOption("--mavenseed", action="store_true", dest="mavenseed")


class Error(Enum):
    SOURCE_DIR_INVALID = 1
    GIT_VERSIONS_DONT_MATCH = 2
    MISSING_GODOT_PROJECT_NAME = 3


def validate_source_directory() -> None:
    """Ensures the source directory contains a content folder."""
    is_source_directory_valid: bool = env["SRC_DIR"].Dir("content").exists()
    if not is_source_directory_valid:
        print_error(f"ERROR: {env['SRC_DIR']} is not a valid source directory!")
        env.Exit(Error.SOURCE_DIR_INVALID)


def try_package_godot_projects() -> None:
    def get_godot_project_name(project_file: File) -> str:
        """Return the project name from a directory with a project.godot file."""
        prefix = "config/name="
        name = ""

        with open(str(project_file), "r") as pf:
            for line in pf:
                if line.startswith(prefix):
                    name = (
                        line.lstrip(prefix).replace(" ", "_").replace('"', "").strip()
                    )
        return name

    def flatten(list_of_lists: List[list]) -> list:
        """Flattens a list of lists."""
        return [item for sublist in list_of_lists for item in sublist]

    # Find all Godot projects and GDScript files to search and replace.
    godot_project_files: List[File] = get_godot_project_files(env["SRC_DIR"])
    godot_project_dirs: List[Dir] = [f.dir for f in godot_project_files]
    project_dirs_as_paths = [Path(str(d)) for d in godot_project_dirs]

    gdscript_filepaths: List[Path] = flatten(
        [pd.rglob("*.gd") for pd in project_dirs_as_paths]
    )
    gdscript_files: List[File] = [File(str(f)) for f in gdscript_filepaths]

    godot_build_dir: Dir = env["BUILD_DIR"].Dir("godot")
    godot_build_files = calculate_target_file_paths(
        godot_build_dir, env["SRC_DIR"], godot_project_files
    )
    gdscript_build_files: List[File] = calculate_target_file_paths(
        godot_build_dir, env["SRC_DIR"], gdscript_files
    )

    # Process GDScript files to remove anchor comments
    for build_file, source_file in zip(gdscript_build_files, gdscript_files):
        env.Depends(build_file, source_file)
        env.Command(
            target=build_file,
            source=source_file,
            action=[
                ["sed", "-Ei", "'/# ?(ANCHOR|END)/d'", "$SOURCE", ">", "$TARGET"],
            ],
        )

    # TODO: Copy all Godot projects to the build directory
    env.Depends(godot_build_files, godot_project_files)
    env.InstallAs(godot_build_files, godot_project_files)

    for godot_source_file, godot_project_file in zip(godot_project_files, godot_build_files):
        project_name = get_godot_project_name(godot_source_file)

        if project_name == "":
            print_error(f"ERROR: Missing Godot project name in {godot_source_file}!")
            env.Exit(Error.MISSING_GODOT_PROJECT_NAME)

        zip_file_path = env["DIST_DIR"].File(project_name + ".zip")
        source_directory = godot_project_file.Dir(".")
        env.Depends(zip_file_path, source_directory)
        env.Command(
            target=zip_file_path,
            source=source_directory,
            action=[
                [
                    env.File("package_godot_project.py"),
                    "$SOURCE",
                    "--output",
                    "${TARGET.dir}",
                    "--title",
                    project_name,
                ],
            ],
        )


def make_strict_mode_checks():
    if not validate_git_versions(env["SRC_DIR"]):
        print_error(
            "ERROR: The Git version of submodules does not match the required version!"
        )
        env.Exit(Error.GIT_VERSIONS_DONT_MATCH)


def glob_extensions(directory: Dir, extensions: list[str]) -> Iterator[File]:
    """Return all files in the given path with an extension in the extension list."""
    return (File(f) for e in extensions for f in Path(str(directory)).glob("**/" + e))


def find_subdirectories(content_dir: Dir) -> list[Dir]:
    """Returns a list of folders within the content folder"""
    content_path_dir = Path(str(content_dir))
    return [Dir(str(d)) for d in content_path_dir.iterdir() if d.is_dir()]


validate_source_directory()
if env.GetOption("strict"):
    make_strict_mode_checks()

env["CONTENT_DIR"] = env["SRC_DIR"].Dir("content")
env["CONTENT_DIRS"] = find_subdirectories(env["CONTENT_DIR"])
env["MEDIA_FILES"] = [
    f
    for d in env["CONTENT_DIRS"]
    for f in glob_extensions(d, ["*.png", "*.jpg", "*.jpeg", "*.svg", "*.gif", "*.mp4"])
]
env["MARKDOWN_FILES"] = [
    f for d in env["CONTENT_DIRS"] for f in glob_extensions(d, ["*.md"])
]

# Make environment variables available to subscripts
Export("env")

try_package_godot_projects()
if env.GetOption("epub"):
    env.SConscript("SCsubEpub")
else:
    mavenseed_files = env.SConscript("SCsub")
    Return("mavenseed_files")
